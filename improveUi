function scene:create(event)
	local sceneGroup = self.view

	local params = event.params or {}
	local moduleName = params.op or "modules.opponents.localOpponent1"
	local team = tostring(params.form) or "opponent_"
	teamG = tostring(team)
	localOpponentModule = require(moduleName)
	opponentUserId = localOpponentModule.userId
	silverEarned = params.silver
	expEarned = params.exp
	titleWs = params.title
	subtitleWs = params.subtitle
	nochicaId = params.userId
	returnTo = params.returnTo

	-- Define o background
	local bgImagePath = "assets/7bg/campaign/" .. params.bg .. ".jpg"
	local bgWidth = 1068
	local bgHeight = 2548
	self:setBackgroundImage(bgImagePath, bgWidth, bgHeight)

	--------------------------------------------------
	-- Cria o grid para o oponente (parte superior)
	--------------------------------------------------
	local opponentGridX = display.contentCenterX
	local opponentGridY = (70 / 1920) * display.actualContentHeight -- padrão
	local opponentGridGroup = createCardGrid(sceneGroup, opponentGridX, opponentGridY)
	_G.opponentGridGroup = opponentGridGroup

	--------------------------------------------------
	-- Cria o grid para o jogador (parte inferior)
	--------------------------------------------------
	local playerGridX = display.contentCenterX
	local playerGridY = display.contentHeight - (200 / 1920) * display.actualContentHeight
	local playerGridGroup = createCardGrid(sceneGroup, playerGridX, playerGridY)
	_G.playerGridGroup = playerGridGroup

	--------------------------------------------------
	-- Hooks para acesso aos grids e formações
	--------------------------------------------------
	battleFunctions = {}
	battleFunctions.getEnemyGroup = function(attacker)
		return attacker.isOpponent and playerGridGroup or opponentGridGroup
	end
	battleFunctions.getOpponents = function(attacker)
		return attacker.isOpponent and playerFormationData or opponentFormationData
	end

	playerGridReady = false
	opponentGridReady = false

	--------------------------------------------------
	-- Carrega a formação do oponente (fase 1)
	--------------------------------------------------
	localOpponentModule.fetchFormationData(opponentUserId, function(opponentFormation, err)
		if err then
			local errTxt = display.newText({
				text = "Erro ao carregar formação do oponente",
				x = display.contentCenterX,
				y = 200,
				font = native.systemFontBold,
				fontSize = 20,
			})
			sceneGroup:insert(errTxt)
			return
		end

c

		displayFormationInGrid(opponentFormationData, opponentGridGroup, gridSlotsOpponent, function()
			opponentGridReady = true
			print("Grid do oponente pronto.")
			if playerGridReady then
				defineFormationCenters()
				timer.performWithDelay(1500, simulateTurnActions)
			end
		end, true)
	end)

	--------------------------------------------------
	-- Carrega a formação do jogador
	--------------------------------------------------
	formationHook.fetchFormationData(playerUserId, function(data, err)
		if err then
			local errTxt = display.newText({
				text = "Erro ao carregar formação do jogador",
				x = display.contentCenterX,
				y = display.contentCenterY,
				font = native.systemFontBold,
				fontSize = 20,
			})
			sceneGroup:insert(errTxt)
			return
		end

		playerFormationData = data
		_G.playerFormationData = playerFormationData

		displayFormationInGrid(playerFormationData, playerGridGroup, gridSlotsPlayer, function()
			playerGridReady = true
			print("Grid do jogador pronto.")
			if opponentGridReady then
				defineFormationCenters()
				timer.performWithDelay(1500, simulateTurnActions)
			end
		end, false)
	end)
end
